import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { GoogleGenerativeAI } from "https://esm.sh/@google/generative-ai@0.21.0"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface GenerateRequest {
  prompt: string;
  referenceImages?: Array<{
    mimeType: string;
    data: string; // base64 encoded
  }>;
  currentImage?: string; // base64 encoded for editing
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Verify authentication
    const authHeader = req.headers.get('Authorization')
    if (!authHeader) {
      throw new Error('No authorization header')
    }

    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: authHeader },
        },
      }
    )

    // Get user from auth token
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      throw new Error('Unauthorized')
    }

    // Get user profile and check credits
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('user_id', user.id)
      .single()

    if (profileError || !profile) {
      throw new Error('Profile not found')
    }

    if (profile.credits_remaining < 1) {
      throw new Error('Insufficient credits')
    }

    // Parse request body
    const { prompt, referenceImages = [], currentImage }: GenerateRequest = await req.json()

    if (!prompt && referenceImages.length === 0 && !currentImage) {
      throw new Error('Either prompt or images are required')
    }

    // Initialize Google Gemini AI
    const apiKey = Deno.env.get('GOOGLE_GEMINI_API_KEY')
    if (!apiKey) {
      throw new Error('Google Gemini API key not configured')
    }

    const genAI = new GoogleGenerativeAI(apiKey)
    const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash-image-preview" })

    // Prepare content parts for the API request
    const parts: any[] = []

    // Add reference images if provided
    if (referenceImages.length > 0) {
      referenceImages.forEach(image => {
        parts.push({
          inlineData: {
            mimeType: image.mimeType,
            data: image.data
          }
        })
      })
    }

    // Add current image if editing existing image
    if (currentImage) {
      parts.push({
        inlineData: {
          mimeType: "image/jpeg",
          data: currentImage
        }
      })
    }

    // Enhance the prompt for better results
    let enhancedPrompt = prompt
    if (referenceImages.length > 0 && currentImage) {
      enhancedPrompt = `Edit the provided image using these reference images for style guidance. ${prompt}`
    } else if (referenceImages.length > 0) {
      enhancedPrompt = `Create a new image inspired by the reference images provided. ${prompt}`
    } else if (currentImage) {
      enhancedPrompt = `Edit the provided image: ${prompt}`
    } else {
      enhancedPrompt = `Create a high-quality image: ${prompt}. Make it professional, engaging, and suitable for LinkedIn content.`
    }

    // Add the text prompt
    parts.push({
      text: enhancedPrompt
    })

    console.log('Sending request to Gemini API with parts:', parts.length)

    // Generate image using Gemini 2.5 Flash Image
    const result = await model.generateContent({
      contents: [{
        parts: parts
      }]
    })

    const response = await result.response
    const candidates = response.candidates

    if (!candidates || candidates.length === 0) {
      throw new Error('No image generated by Gemini API')
    }

    // Extract the generated image
    const candidate = candidates[0]
    const content = candidate.content
    
    if (!content || !content.parts || content.parts.length === 0) {
      throw new Error('No content parts in response')
    }

    // Find the image part in the response
    let imageData = null
    for (const part of content.parts) {
      if (part.inlineData && part.inlineData.data) {
        imageData = part.inlineData.data
        break
      }
    }

    if (!imageData) {
      throw new Error('No image data found in response')
    }

    // Convert base64 to blob and upload to Supabase Storage
    const imageBuffer = Uint8Array.from(atob(imageData), c => c.charCodeAt(0))
    const fileName = `visual-canvas/${user.id}/${Date.now()}.png`

    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('generated-images')
      .upload(fileName, imageBuffer, {
        contentType: 'image/png',
        upsert: true
      })

    if (uploadError) {
      console.error('Upload error:', uploadError)
      throw new Error('Failed to save generated image')
    }

    // Get public URL for the uploaded image
    const { data: { publicUrl } } = supabase.storage
      .from('generated-images')
      .getPublicUrl(fileName)

    // Deduct credit from user profile
    const { error: creditError } = await supabase
      .from('profiles')
      .update({ 
        credits_remaining: profile.credits_remaining - 1,
        credits_used: (profile.credits_used || 0) + 1
      })
      .eq('user_id', user.id)

    if (creditError) {
      console.error('Credit deduction error:', creditError)
      // Don't throw error here, image generation was successful
    }

    // Log the generation for analytics
    const { error: logError } = await supabase
      .from('visual_generations')
      .insert({
        user_id: user.id,
        prompt: prompt,
        reference_images: referenceImages.length > 0 ? referenceImages : null,
        generated_image_url: publicUrl,
        credits_used: 1,
        api_provider: 'gemini-2.5-flash-image',
        created_at: new Date().toISOString()
      })

    if (logError) {
      console.error('Logging error:', logError)
      // Don't throw error here, image generation was successful
    }

    return new Response(
      JSON.stringify({
        success: true,
        imageUrl: publicUrl,
        creditsRemaining: profile.credits_remaining - 1,
        message: 'Image generated successfully'
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      }
    )

  } catch (error) {
    console.error('Error in generate-visual-canvas function:', error)
    
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message || 'Failed to generate image',
        details: error.toString()
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500,
      }
    )
  }
})